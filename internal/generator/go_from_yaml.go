package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"text/template"

	"github.com/iancoleman/strcase"
	"github.com/jinzhu/inflection"

	"github.com/faciam-dev/gcfm/pkg/registry/codec"
)

type GoFromYAMLOptions struct {
	Package string
	Table   string
}

type field struct {
	Name      string
	Type      string
	Column    string
	Validate  string
	OmitEmpty bool
}

type tplData struct {
	Package    string
	StructName string
	Fields     []field
	ImportTime bool
}

func sqlTypeToGo(t string) (string, bool) {
	base := t
	if idx := len(t); idx > 0 {
		// remove size like varchar(255)
		if i := indexByte(t, '('); i > 0 {
			base = t[:i]
		}
	}
	goType, ok := SQLToGo[base]
	if !ok {
		return "", false
	}
	switch goType {
	case "string":
		return goType, false
	default:
		return "*" + goType, true
	}
}

func GenerateGoFromYAML(data []byte, opts GoFromYAMLOptions) ([]byte, error) {
	metas, err := codec.DecodeYAML(data)
	if err != nil {
		return nil, err
	}
	var fields []field
	for _, m := range metas {
		if m.TableName != opts.Table {
			continue
		}
		goType, ptr := sqlTypeToGo(m.DataType)
		if goType == "" {
			return nil, fmt.Errorf("unsupported type: %s", m.DataType)
		}
		f := field{
			Name:      strcase.ToCamel(m.ColumnName),
			Type:      goType,
			Column:    m.ColumnName,
			Validate:  m.Validator,
			OmitEmpty: ptr,
		}
		if m.Validator == "" {
			f.Validate = ""
		}
		fields = append(fields, f)
	}
	if len(fields) == 0 {
		return nil, fmt.Errorf("no fields for table %s", opts.Table)
	}
	stName := strcase.ToCamel(inflection.Singular(opts.Table)) + "CF"
	dataCtx := tplData{Package: opts.Package, StructName: stName, Fields: fields}
	for _, f := range fields {
		if f.Type == "time.Time" || f.Type == "*time.Time" {
			dataCtx.ImportTime = true
			break
		}
	}
	tpl := `// Code generated by fieldctl; DO NOT EDIT.
package {{.Package}}
{{if .ImportTime}}
import "time"
{{end}}

type {{.StructName}} struct {
{{- range .Fields}}
    {{.Name}} {{.Type}} ` + "`cf:\"{{.Column}}\"" + `{{if .Validate}} validate:"{{.Validate}}"{{end}} json:"{{.Column}}{{if .OmitEmpty}},omitempty{{end}}"` + "`" + `
{{- end}}
}
`
	tmpl, err := template.New("go").Parse(tpl)
	if err != nil {
		return nil, err
	}
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, dataCtx); err != nil {
		return nil, err
	}
	return format.Source(buf.Bytes())
}

func indexByte(s string, c byte) int {
	for i := 0; i < len(s); i++ {
		if s[i] == c {
			return i
		}
	}
	return -1
}
